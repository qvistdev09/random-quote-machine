{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","App","props","state","quotes","quoteToDisplay","authorToDisplay","currentIndex","changeQuote","bind","randomChoice","random","this","length","setState","quote","author","fetch","then","data","json","q","className","style","maxWidth","onClick","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCZAC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACRC,eAAgB,GAChBC,gBAAiB,GACjBC,aAAc,MAEhB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARF,E,0DAYjB,IAAMC,EAAeC,iBAAO,EAAGC,KAAKT,MAAMC,OAAOA,OAAOS,OAAS,GAEjED,KAAKE,SAAS,CACZP,aAAcG,EACdL,eAAgBO,KAAKT,MAAMC,OAAOA,OAAOM,GAAcK,MACvDT,gBAAiBM,KAAKT,MAAMC,OAAOA,OAAOM,GAAcM,W,0CAIvC,IAAD,OAClBC,MACE,0IAECC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OACJ,EAAKP,SAAS,CAAEV,OAAQiB,IAAK,WAC3B,EAAKP,SACH,CACEP,aAAcI,iBAAO,EAAG,EAAKR,MAAMC,OAAOA,OAAOS,OAAS,KAE5D,WACE,EAAKC,SAAS,CACZT,eAAgB,EAAKF,MAAMC,OAAOA,OAChC,EAAKD,MAAMI,cACXQ,MACFT,gBAAiB,EAAKH,MAAMC,OAAOA,OACjC,EAAKD,MAAMI,cACXS,oB,+BASd,OACE,yBAAKM,UAAU,mBACb,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,eAAeC,MAAO,CAACC,SAAU,UAC9C,yBAAKF,UAAU,eAAf,wBACA,yBAAKA,UAAU,aACb,uBAAGA,UAAU,aAAaV,KAAKT,MAAME,gBACrC,uBAAGiB,UAAU,oCAAoCV,KAAKT,MAAMG,iBAC5D,4BAAQgB,UAAU,kCAAkCG,QAASb,KAAKJ,aAAlE,yB,GAzDIkB,IAAMC,WAoExBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqDpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8eb830b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { random } from 'lodash';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      quoteToDisplay: '',\n      authorToDisplay: '',\n      currentIndex: null,\n    };\n    this.changeQuote = this.changeQuote.bind(this);\n  }\n\n  changeQuote() {\n    const randomChoice = random(0, this.state.quotes.quotes.length - 1);\n\n    this.setState({\n      currentIndex: randomChoice,\n      quoteToDisplay: this.state.quotes.quotes[randomChoice].quote,\n      authorToDisplay: this.state.quotes.quotes[randomChoice].author,\n    });\n  }\n\n  componentDidMount() {\n    fetch(\n      'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n    )\n      .then((data) => data.json())\n      .then((q) =>\n        this.setState({ quotes: q }, () => {\n          this.setState(\n            {\n              currentIndex: random(0, this.state.quotes.quotes.length - 1),\n            },\n            () => {\n              this.setState({\n                quoteToDisplay: this.state.quotes.quotes[\n                  this.state.currentIndex\n                ].quote,\n                authorToDisplay: this.state.quotes.quotes[\n                  this.state.currentIndex\n                ].author,\n              });\n            }\n          );\n        })\n      );\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row align-items-center min100vh\">\n          <div className=\"card mx-auto\" style={{maxWidth: \"25rem\"}}>\n            <div className=\"card-header\">Random Quote Machine</div>\n            <div className=\"card-body\">\n              <p className=\"card-text\">{this.state.quoteToDisplay}</p>\n              <p className=\"card-text text-right font-italic\">{this.state.authorToDisplay}</p>\n              <button className=\"btn btn-primary mx-auto d-block\" onClick={this.changeQuote}>\n                Get new quote\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}